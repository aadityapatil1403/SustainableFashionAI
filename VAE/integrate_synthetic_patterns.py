import os
import json
import numpy as np
import cv2
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
import argparse
import random
from tqdm import tqdm
import shutil

def load_generated_patterns(file_path):
    """
    Load generated pattern pieces from JSON file
    
    Args:
        file_path: Path to the generated patterns JSON file
    
    Returns:
        List of pattern pieces
    """
    with open(file_path, 'r') as f:
        data = json.load(f)
    
    return data.get('pattern_pieces', [])

def validate_pattern(points, min_points=4, min_area=100):
    """
    Validate a pattern piece
    
    Args:
        points: List of [x, y] coordinates
        min_points: Minimum number of points required
        min_area: Minimum area required
    
    Returns:
        True if valid, False otherwise
    """
    if len(points) < min_points:
        return False
    
    try:
        # Create polygon
        poly = Polygon(points)
        
        # Check if polygon is valid
        if not poly.is_valid:
            return False
        
        # Check area
        if poly.area < min_area:
            return False
        
        return True
    except Exception as e:
        print(f"Error validating pattern: {e}")
        return False

def simplify_polygon(points, epsilon=1.0):
    """
    Simplify polygon using Douglas-Peucker algorithm
    
    Args:
        points: List of [x, y] coordinates
        epsilon: Epsilon value for simplification
    
    Returns:
        Simplified polygon points
    """
    # Convert to numpy array
    points_array = np.array(points, dtype=np.float32)
    
    # Simplify
    simplified = cv2.approxPolyDP(points_array.reshape(-1, 1, 2), epsilon, True)
    
    # Convert back to list
    return simplified.reshape(-1, 2).tolist()

def create_pattern_set(generated_patterns, n_pieces=5, output_file=None):
    """
    Create a pattern set from generated pieces
    
    Args:
        generated_patterns: List of generated pattern pieces
        n_pieces: Number of pieces to include in the set
        output_file: Output JSON file
    
    Returns:
        Pattern set as JSON object
    """
    # Filter valid patterns
    valid_patterns = []
    for pattern in generated_patterns:
        points = pattern.get('points', [])
        if validate_pattern(points):
            # Simplify polygon
            simplified_points = simplify_polygon(points)
            
            # Update pattern
            pattern['points'] = simplified_points
            valid_patterns.append(pattern)
    
    print(f"Found {len(valid_patterns)} valid patterns out of {len(generated_patterns)}")
    
    # Select random subset
    if len(valid_patterns) > n_pieces:
        selected_patterns = random.sample(valid_patterns, n_pieces)
    else:
        selected_patterns = valid_patterns
    
    # Create pattern set
    pattern_set = {
        'name': 'Synthetic Pattern Set',
        'description': 'Generated by VAE model',
        'pattern_pieces': selected_patterns
    }
    
    # Save to file
    if output_file:
        with open(output_file, 'w') as f:
            json.dump(pattern_set, f, indent=2)
        print(f"Saved pattern set to {output_file}")
    
    return pattern_set

def visualize_pattern_set(pattern_set, output_file=None):
    """
    Visualize a pattern set
    
    Args:
        pattern_set: Pattern set as JSON object
        output_file: Output image file
    """
    pieces = pattern_set.get('pattern_pieces', [])
    n_pieces = len(pieces)
    
    if n_pieces == 0:
        print("No pattern pieces to visualize")
        return
    
    # Calculate grid size
    cols = min(5, n_pieces)
    rows = (n_pieces + cols - 1) // cols
    
    plt.figure(figsize=(cols * 3, rows * 3))
    
    for i, piece in enumerate(pieces):
        points = piece.get('points', [])
        
        if not points:
            continue
        
        # Create binary image
        img = np.zeros((64, 64), dtype=np.uint8)
        points_array = np.array(points, dtype=np.int32)
        cv2.fillPoly(img, [points_array], 255)
        
        # Plot
        plt.subplot(rows, cols, i + 1)
        plt.imshow(img, cmap='gray')
        plt.title(f"Piece {i+1}")
        plt.axis('off')
    
    plt.tight_layout()
    
    if output_file:
        plt.savefig(output_file)
        print(f"Saved visualization to {output_file}")
    
    plt.show()

def prepare_for_optimizer(pattern_set, output_dir):
    """
    Prepare pattern set for use with the optimizer
    
    Args:
        pattern_set: Pattern set as JSON object
        output_dir: Output directory
    """
    os.makedirs(output_dir, exist_ok=True)
    
    # Save pattern set
    output_file = os.path.join(output_dir, 'synthetic_pattern.json')
    with open(output_file, 'w') as f:
        json.dump(pattern_set, f, indent=2)
    
    print(f"Saved pattern set for optimizer to {output_file}")
    
    # Create SVG visualization for each piece
    svg_dir = os.path.join(output_dir, 'svg')
    os.makedirs(svg_dir, exist_ok=True)
    
    for i, piece in enumerate(pattern_set.get('pattern_pieces', [])):
        points = piece.get('points', [])
        
        if not points:
            continue
        
        # Create SVG
        svg_content = create_svg_from_points(points, f"Synthetic Piece {i+1}")
        
        # Save SVG
        svg_file = os.path.join(svg_dir, f"piece_{i+1}.svg")
        with open(svg_file, 'w') as f:
            f.write(svg_content)

def create_svg_from_points(points, title):
    """
    Create SVG from polygon points
    
    Args:
        points: List of [x, y] coordinates
        title: SVG title
    
    Returns:
        SVG content as string
    """
    # Calculate bounds
    points_array = np.array(points)
    min_x, min_y = np.min(points_array, axis=0)
    max_x, max_y = np.max(points_array, axis=0)
    
    width = max_x - min_x + 20
    height = max_y - min_y + 20
    
    # Create SVG header
    svg = f'<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">\n'
    
    # Add title
    svg += f'  <title>{title}</title>\n'
    
    # Create polygon points string
    points_str = " ".join([f"{x-min_x+10},{y-min_y+10}" for x, y in points])
    
    # Add polygon
    svg += f'  <polygon points="{points_str}" fill="#cccccc" stroke="black" stroke-width="1" />\n'
    
    # Close SVG
    svg += '</svg>'
    
    return svg

def main():
    parser = argparse.ArgumentParser(description='Integrate synthetic patterns with optimizer')
    parser.add_argument('--input', type=str, required=True,
                        help='Path to the generated patterns JSON file')
    parser.add_argument('--output', type=str, default='synthetic_patterns',
                        help='Output directory for pattern sets')
    parser.add_argument('--pieces', type=int, default=5,
                        help='Number of pieces to include in each pattern set')
    parser.add_argument('--sets', type=int, default=3,
                        help='Number of pattern sets to create')
    
    args = parser.parse_args()
    
    # Create output directory
    os.makedirs(args.output, exist_ok=True)
    
    # Load generated patterns
    generated_patterns = load_generated_patterns(args.input)
    
    if not generated_patterns:
        print(f"No patterns found in {args.input}")
        return
    
    print(f"Loaded {len(generated_patterns)} generated patterns")
    
    # Create pattern sets
    for i in range(args.sets):
        print(f"\nCreating pattern set {i+1}/{args.sets}")
        
        # Create output directory for this set
        set_dir = os.path.join(args.output, f"set_{i+1}")
        os.makedirs(set_dir, exist_ok=True)
        
        # Create pattern set
        pattern_set = create_pattern_set(
            generated_patterns, 
            n_pieces=args.pieces,
            output_file=os.path.join(set_dir, 'pattern_set.json')
        )
        
        # Visualize pattern set
        visualize_pattern_set(
            pattern_set,
            output_file=os.path.join(set_dir, 'visualization.png')
        )
        
        # Prepare for optimizer
        prepare_for_optimizer(
            pattern_set,
            output_dir=os.path.join(set_dir, 'optimizer')
        )

if __name__ == "__main__":
    main()
